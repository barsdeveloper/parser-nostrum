class e{#e=new Map;get(e,t){return this.#e.get(e)?.get(t)}set(e,t,r){let s=this.#e.get(e);return s||(s=new Map,this.#e.set(e,s)),s.set(t,r),this}setGet(e,t,r){return this.set(e,t,r),r}}class t{static makeSuccess(e,t){return{status:!0,value:t,position:e}}static makeFailure(e){return{status:!1,value:null,position:e}}static makeContext(t=null,r=""){return{regexer:t,input:r,equals:new e,visited:new Map}}}class r{static indentation="    ";predicate=e=>this===e||e instanceof Function&&this instanceof e;isActualParser=!0;Self;static mergeResults(e,t){return t?{status:e.status,position:e.position,value:e.value}:e}constructor(){this.Self=this.constructor}unwrap(e=null){return[]}wrap(...e){return null}parse(e,t){return null}actualParser(e=[],t=[]){let r=(!this.isActualParser||e.some(this.predicate))&&!t.some(this.predicate),s=r?this.unwrap():void 0;return r&&=1===s?.length,r?s[0].actualParser(e,t):this}withActualParser(e,t=[],r=[]){let s=(!this.isActualParser||t.some(this.predicate))&&!r.some(this.predicate),a=s?this.unwrap():void 0;return s&&=1===a?.length,s?this.wrap(a[0].withActualParser(e,t,r)):e}equals(e,t,r){let s=this;if(s===t)return!0;if(r||(s=this.actualParser(),t=t.actualParser()),t instanceof s.constructor&&!(s instanceof t.constructor)||t.resolve&&!s.resolve){const e=s;s=t,t=e}let a=e.equals.get(s,t);return void 0!==a||void 0===a&&(e.equals.set(s,t,!0),a=s.doEquals(e,t,r),e.equals.set(s,t,a)),a}doEquals(e,t,r){return!1}toString(e=t.makeContext(null,""),r=0){return e.visited.has(this)?"<...>":(e.visited.set(this,null),this.doToString(e,r))}doToString(e,t=0){return`${this.constructor.name} does not implement toString()`}}class s extends r{static successParserInstance;#t;get value(){return this.#t}constructor(e){super(),this.#t=e}parse(e,r){const s=r+this.#t.length,a=e.input.substring(r,s);return this.#t===a?t.makeSuccess(s,this.#t):t.makeFailure(r)}doEquals(e,t,r){return t instanceof s&&this.#t===t.#t}doToString(e,t=0){const r=this.value.replaceAll("\n","\\n");return 1!==this.value.length||this.value.trim()!==this.value?`"${r.replaceAll('"','\\"')}"`:r}}class a extends s{static instance=new a;static{s.successParserInstance=this.instance}constructor(){super("")}doEquals(e,t,r){return r?t instanceof a:super.doEquals(e,t,!1)}doToString(e,t=0){return"<SUCCESS>"}}class n extends r{#r=!1;get backtracking(){return this.#r}#s;get parsers(){return this.#s}constructor(...e){super(),this.#s=e,1===this.#s.length&&(this.isActualParser=!1)}unwrap(){return[...this.#s]}wrap(...e){const t=new this.Self(...e);return t.#r=this.#r,t}asBacktracking(){const e=this.wrap(...this.#s);return e.#r=!0,e}parse(e,r){let s;for(let t=0;t<this.#s.length;++t)if(s=this.#s[t].parse(e,r),s.status)return s;return t.makeFailure(r)}doEquals(e,t,r){if(!(t instanceof n)||this.#s.length!=t.#s.length||this.#r!==t.#r)return!1;for(let s=0;s<this.#s.length;++s)if(!this.#s[s].equals(e,t.#s[s],r))return!1;return!0}doToString(e,t=0){const n=r.indentation.repeat(t),i=r.indentation.repeat(t+1);if(2===this.#s.length&&this.#s[1]instanceof a){let r=this.#s[0].toString(e,t);return this.#s[0]instanceof s||e.visited.has(this.#s[0])||(r="<"+r+">"),r+="?",r}return"ALT<\n"+i+this.#s.map((r=>r.toString(e,t+1))).join("\n"+i+"| ")+"\n"+n+">"}}class i extends r{#a;get parser(){return this.#a}#n;constructor(e,t){super(),this.#a=e,this.#n=t}unwrap(e=null){return[this.#a]}wrap(...e){return new i(e[0],this.#n)}parse(e,r){let s=this.#a.parse(e,r);return s.status?(s=this.#n(s.value,e.input,s.position)?.getParser().parse(e,s.position)??t.makeFailure(s.position),s):s}doEquals(e,t,r){return t instanceof i&&this.#n===t.#n&&this.#a.equals(e,t.parser,r)}doToString(e,t=0){return this.#a.toString(e,t)+" => chained<f()>"}}class u extends r{static instance=new u;parse(e,r){return t.makeFailure(r)}doEquals(e,t,r){return t instanceof u}doToString(e,t=0){return"<FAILURE>"}}class p extends r{#a;isActualParser=!1;#i;constructor(e){super(),this.#a=e}resolve(){return this.#i||(this.#i=this.#a().getParser()),this.#i}unwrap(e=null){return[this.resolve()]}wrap(...e){const t=this.#a().constructor;return new p((()=>new t(e[0])))}parse(e,t){return this.resolve(),this.#i.parse(e,t)}doEquals(e,t,r){if(t instanceof p){if(this.#a===t.#a)return!0;t=t.resolve()}else if(r)return!1;return this.resolve(),this.#i.equals(e,t,r)}doToString(e,t=0){return this.resolve().toString(e,t)}}class h extends r{#a;get parser(){return this.#a}#u;get type(){return this.#u}static Type={NEGATIVE_AHEAD:"?!",NEGATIVE_BEHIND:"?<!",POSITIVE_AHEAD:"?=",POSITIVE_BEHIND:"?<="};constructor(e,t){super(),this.#a=e,this.#u=t}unwrap(e=null){return[this.#a]}wrap(...e){return new h(e[0],this.#u)}parse(e,r){if(this.#u===h.Type.NEGATIVE_BEHIND||this.#u===h.Type.POSITIVE_BEHIND)throw new Error("Lookbehind is not implemented yet");return this.#a.parse(e,r).status==(this.#u===h.Type.POSITIVE_AHEAD)?t.makeSuccess(r,""):t.makeFailure(r)}doEquals(e,t,r){return this===t||t instanceof h&&this.#u===t.#u&&this.#a.equals(e,t.#a,r)}doToString(e,t=0){return"("+this.#u+this.#a.toString(e,t)+")"}}class o extends r{#a;get parser(){return this.#a}#p;get mapper(){return this.#p}isActualParser=!1;constructor(e,t){super(),this.#a=e,this.#p=t}unwrap(e=null){return[this.#a]}wrap(...e){return new o(e[0],this.#p)}parse(e,t){const r=this.#a.parse(e,t);return r.status&&(r.value=this.#p(r.value)),r}doEquals(e,t,r){return t instanceof o&&this.#p===t.#p&&this.#a.equals(e,t.#a,r)}doToString(e,t=0){let r=this.#p.toString();return(r.length>80||r.includes("\n"))&&(r="( ... ) => { ... }"),this.#a.toString(e,t)+` -> map<${r}>`}}class c extends r{#h;get regexp(){return this.#h}#o;#c;constructor(e,t){super(),e instanceof RegExp?(this.#h=e,this.#o=new RegExp(`^(?:${e.source})`,e.flags)):e instanceof c&&(this.#h=e.#h,this.#o=e.#o),this.#c=t}parse(e,r){const s=this.#o.exec(e.input.substring(r));return s?t.makeSuccess(r+s[0].length,this.#c>=0?s[this.#c]:s):t.makeFailure(r)}doEquals(e,t,r){return t instanceof c&&(!r||this.#c===t.#c)&&this.#h.source===t.#h.source}doToString(e,t=0){return"/"+this.#h.source+"/"}}class l extends r{#s;get parsers(){return this.#s}constructor(...e){super(),this.#s=e,1===this.#s.length&&(this.isActualParser=!1)}unwrap(e=null){return[...this.#s]}wrap(...e){return new l(...e)}parse(e,r){const s=new Array(this.#s.length),a=t.makeSuccess(r,s);for(let t=0;t<this.#s.length;++t){const r=this.#s[t].parse(e,a.position);if(!r.status)return r;a.value[t]=r.value,a.position=r.position}return a}doEquals(e,t,r){if(!(t instanceof l)||this.#s.length!=t.#s.length)return!1;for(let s=0;s<this.#s.length;++s)if(!this.#s[s].equals(e,t.#s[s],r))return!1;return!0}doToString(e,t=0){const s=r.indentation.repeat(t),a=r.indentation.repeat(t+1);return"SEQ<\n"+this.#s.map((r=>a+r.toString(e,t+1))).join("\n")+"\n"+s+">"}}class g extends r{#r=!1;get backtracking(){return this.#r}#a;get parser(){return this.#a}#l;get min(){return this.#l}#g;get max(){return this.#g}constructor(e,t=0,r=Number.POSITIVE_INFINITY){if(super(),t>r)throw new Error("Min is greater than max");this.#a=e,this.#l=t,this.#g=r}unwrap(e=null){return[this.#a]}wrap(...e){const t=new g(e[0],this.#l,this.#g);return this.#r&&(t.#r=!0),t}asBacktracking(){const e=new g(this.#a,this.#l,this.#g);return e.#r=!0,e}parse(e,r){const s=t.makeSuccess(r,[]);for(let t=0;t<this.#g;++t){const r=this.#a.parse(e,s.position);if(!r.status)return t>=this.#l?s:r;s.value.push(r.value),s.position=r.position}return s}doEquals(e,t,r){return t instanceof g&&this.#r===t.#r&&this.#l===t.#l&&this.#g===t.#g&&this.#a.equals(e,t.#a,r)}doToString(e,t=0){return this.parser.toString(e,t)+(0===this.#l&&1===this.#g?"?":0===this.#l&&this.#g===Number.POSITIVE_INFINITY?"*":1===this.#l&&this.#g===Number.POSITIVE_INFINITY?"+":"{"+this.#l+(this.#l!==this.#g?",":this.#g!==Number.POSITIVE_INFINITY?this.#g:"")+"}")}}class m extends n{constructor(e){super(e,a.instance)}unwrap(e=null){return[this.parsers[0]]}wrap(...e){return super.wrap(...e,a.instance)}}class d{#a;#m;#d=new Map;Self;static#w=e=>Number(e);static#x=([e,t])=>e;static#f=([e,t])=>t;static#S=([e,t])=>[e,...t];static#E=e=>e instanceof Array?e.join(""):e;static#k=e=>String.raw`[^${e}\\]*(?:\\.[^${e}\\]*)*`;static#I=/[-\+]?(?:\d*\.)?\d+/;static number=this.regexp(new RegExp(this.#I.source+String.raw`(?!\.)`)).map(this.#w);static numberNatural=this.regexp(/\d+/).map(this.#w);static numberExponential=this.regexp(new RegExp(this.#I.source+String.raw`(?:[eE][\+\-]?\d+)?(?!\.)`)).map(this.#w);static numberUnit=this.regexp(/\+?(?:0(?:\.\d+)?|1(?:\.0+)?)(?![\.\d])/).map(this.#w);static whitespace=this.regexp(/\s+/);static whitespaceInline=this.regexp(/[^\S\n]+/);static whitespaceMultiline=this.regexp(/\s*?\n\s*/);static optWhitespace=this.regexp(/\s*/);static doubleQuotedString=this.regexpGroups(new RegExp(`"(${this.#k('"')})"`)).map(this.#f);static singleQuotedString=this.regexpGroups(new RegExp(`'(${this.#k("'")})'`)).map(this.#f);static backtickQuotedString=this.regexpGroups(new RegExp(`\`(${this.#k("`")})\``)).map(this.#f);constructor(e,t=!1){this.Self=this.constructor,this.#a=e,this.#m=t}static optimize(e){}static equals(e,r,s=!1){const a=e instanceof d?e.getParser():e,n=r instanceof d?r.getParser():r;return a.equals(t.makeContext(e instanceof d?e:r instanceof d?r:null),n,s)}getParser(){return this.#a}run(e){const r=this.#a.parse(t.makeContext(this,e),0);return r.status&&r.position===e.length?r:t.makeFailure(r.position)}parse(e){const t=this.run(e);if(!t.status)throw new Error("Parsing error");return t.value}static str(e){return new this(new s(e))}static regexp(e,t=0){return new this(new c(e,t))}static regexpGroups(e){return new this(new c(e,-1))}static success(){return new this(a.instance)}static failure(){return new this(u.instance)}static seq(...e){return new this(new l(...e.map((e=>e.getParser()))))}static alt(...e){return new this(new n(...e.map((e=>e.getParser()))))}static lookahead(e){return new this(new h(e.getParser(),h.Type.POSITIVE_AHEAD))}static lazy(e){return new this(new p(e))}times(e,t=e){return new this.Self(new g(this.#a,e,t))}many(){return this.times(0,Number.POSITIVE_INFINITY)}atLeast(e){return this.times(e,Number.POSITIVE_INFINITY)}atMost(e){return this.times(0,e)}opt(){return new this.Self(new m(this.#a))}sepBy(e,t=!1){return this.Self.seq(this,this.Self.seq(e,this).map(d.#f).many()).map(d.#S)}skipSpace(){return this.Self.seq(this,this.Self.optWhitespace).map(d.#x)}map(e){return new this.Self(new o(this.#a,e))}chain(e){return new this.Self(new i(this.#a,e))}assert(e){return this.chain(((t,r,s)=>e(t,r,s)?this.Self.success().map((()=>t)):this.Self.failure()))}join(e=""){return this.map(d.#E)}toString(e=0,s=!1){return(s?"\n"+r.indentation.repeat(e):"")+this.#a.toString(t.makeContext(this,""),e)}}export{d as default};
