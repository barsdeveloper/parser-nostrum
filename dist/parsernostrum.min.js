class t{static makeSuccess(t,e){return{status:!0,value:e,position:t}}static makeFailure(t){return{status:!1,value:null,position:t}}static makeContext(t=null,e=""){return{parsernostrum:t,input:e,visited:new Map}}}class e{static indentation="    ";predicate=t=>this===t||t instanceof Function&&this instanceof t;Self;static mergeResults(t,e){return e?{status:t.status,position:t.position,value:t.value}:t}constructor(){this.Self=this.constructor}unwrap(){return[]}wrap(...t){return null}parse(t,e){return null}toString(e=t.makeContext(null,""),r=0){return e.visited.has(this)?"<...>":(e.visited.set(this,null),this.doToString(e,r))}doToString(t,e=0){return`${this.constructor.name} does not implement toString()`}}class r extends e{static successParserInstance;#t;get value(){return this.#t}constructor(t){super(),this.#t=t}parse(e,r){const s=r+this.#t.length,n=e.input.substring(r,s);return this.#t===n?t.makeSuccess(s,this.#t):t.makeFailure(r)}doToString(t,e=0){const r=this.value.replaceAll("\n","\\n");return 1!==this.value.length||this.value.trim()!==this.value?`"${r.replaceAll('"','\\"')}"`:r}}class s extends r{static instance=new s;static{r.successParserInstance=this.instance}constructor(){super("")}doToString(t,e=0){return"<SUCCESS>"}}class n extends e{#e;get parsers(){return this.#e}constructor(...t){super(),this.#e=t}unwrap(){return[...this.#e]}wrap(...t){return new this.Self(...t)}parse(e,r){let s;for(let t=0;t<this.#e.length;++t)if(s=this.#e[t].parse(e,r),s.status)return s;return t.makeFailure(r)}doToString(t,n=0){const i=e.indentation.repeat(n),a=e.indentation.repeat(n+1);if(2===this.#e.length&&this.#e[1]instanceof s){let e=this.#e[0].toString(t,n);return this.#e[0]instanceof r||t.visited.has(this.#e[0])||(e="<"+e+">"),e+="?",e}return"ALT<\n"+a+this.#e.map((e=>e.toString(t,n+1))).join("\n"+a+"| ")+"\n"+i+">"}}class i extends e{#r;get parser(){return this.#r}#s;constructor(t,e){super(),this.#r=t,this.#s=e}unwrap(){return[this.#r]}wrap(...t){return new i(t[0],this.#s)}parse(e,r){let s=this.#r.parse(e,r);return s.status?(s=this.#s(s.value,e.input,s.position)?.getParser().parse(e,s.position)??t.makeFailure(s.position),s):s}doToString(t,e=0){return this.#r.toString(t,e)+" => chained<f()>"}}class a extends e{static instance=new a;parse(e,r){return t.makeFailure(r)}doToString(t,e=0){return"<FAILURE>"}}class p extends e{#r;#n;constructor(t){super(),this.#r=t}resolve(){return this.#n||(this.#n=this.#r().getParser()),this.#n}unwrap(){return[this.resolve()]}wrap(...t){const e=this.#r().constructor;return new p((()=>new e(t[0])))}parse(t,e){return this.resolve(),this.#n.parse(t,e)}doToString(t,e=0){return this.resolve().toString(t,e)}}class u extends e{#r;get parser(){return this.#r}#i;get type(){return this.#i}static Type={NEGATIVE_AHEAD:"?!",NEGATIVE_BEHIND:"?<!",POSITIVE_AHEAD:"?=",POSITIVE_BEHIND:"?<="};constructor(t,e){super(),this.#r=t,this.#i=e}unwrap(){return[this.#r]}wrap(...t){return new u(t[0],this.#i)}parse(e,r){if(this.#i===u.Type.NEGATIVE_BEHIND||this.#i===u.Type.POSITIVE_BEHIND)throw new Error("Lookbehind is not implemented yet");return this.#r.parse(e,r).status==(this.#i===u.Type.POSITIVE_AHEAD)?t.makeSuccess(r,""):t.makeFailure(r)}doToString(t,e=0){return"("+this.#i+this.#r.toString(t,e)+")"}}class h extends e{#r;get parser(){return this.#r}#a;get mapper(){return this.#a}constructor(t,e){super(),this.#r=t,this.#a=e}unwrap(){return[this.#r]}wrap(...t){return new h(t[0],this.#a)}parse(t,e){const r=this.#r.parse(t,e);return r.status&&(r.value=this.#a(r.value)),r}doToString(t,e=0){let r=this.#a.toString();return(r.length>60||r.includes("\n"))&&(r="(...) => { ... }"),this.#r.toString(t,e)+` -> map<${r}>`}}class o extends e{#p;get regexp(){return this.#p}#u;#h;constructor(t,e){super(),t instanceof RegExp?(this.#p=t,this.#u=new RegExp(`^(?:${t.source})`,t.flags)):t instanceof o&&(this.#p=t.#p,this.#u=t.#u),this.#h=e}parse(e,r){const s=this.#u.exec(e.input.substring(r));return s?t.makeSuccess(r+s[0].length,this.#h>=0?s[this.#h]:s):t.makeFailure(r)}doToString(t,e=0){return"/"+this.#p.source+"/"}}class c extends e{#e;get parsers(){return this.#e}constructor(...t){super(),this.#e=t}unwrap(){return[...this.#e]}wrap(...t){return new c(...t)}parse(e,r){const s=new Array(this.#e.length),n=t.makeSuccess(r,s);for(let t=0;t<this.#e.length;++t){const r=this.#e[t].parse(e,n.position);if(!r.status)return r;n.value[t]=r.value,n.position=r.position}return n}doToString(t,r=0){const s=e.indentation.repeat(r),n=e.indentation.repeat(r+1);return"SEQ<\n"+this.#e.map((e=>n+e.toString(t,r+1))).join("\n")+"\n"+s+">"}}class l extends e{#r;get parser(){return this.#r}#o;get min(){return this.#o}#c;get max(){return this.#c}constructor(t,e=0,r=Number.POSITIVE_INFINITY){if(super(),e>r)throw new Error("Min is greater than max");this.#r=t,this.#o=e,this.#c=r}unwrap(){return[this.#r]}wrap(...t){return new l(t[0],this.#o,this.#c)}parse(e,r){const s=t.makeSuccess(r,[]);for(let t=0;t<this.#c;++t){const r=this.#r.parse(e,s.position);if(!r.status)return t>=this.#o?s:r;s.value.push(r.value),s.position=r.position}return s}doToString(t,e=0){return this.parser.toString(t,e)+(0===this.#o&&1===this.#c?"?":0===this.#o&&this.#c===Number.POSITIVE_INFINITY?"*":1===this.#o&&this.#c===Number.POSITIVE_INFINITY?"+":"{"+this.#o+(this.#o!==this.#c?","+this.#c:"")+"}")}}class g{#r;Self;static#l=([t,e])=>t;static#g=([t,e])=>e;static#m=([t,e])=>[t,...e];static#d=t=>t instanceof Array?t.join(""):t;static#w=t=>String.raw`[^${t}\\]*(?:\\.[^${t}\\]*)*`;static#S=/[-\+]?(?:\d*\.)?\d+/;static number=this.reg(new RegExp(this.#S.source+String.raw`(?!\.)`)).map(Number);static numberInteger=this.reg(/[\-\+]?\d+(?!\.\d)/).map(Number);static numberNatural=this.reg(/\d+/).map(Number);static numberExponential=this.reg(new RegExp(this.#S.source+String.raw`(?:[eE][\+\-]?\d+)?(?!\.)`)).map(Number);static numberUnit=this.reg(/\+?(?:0(?:\.\d+)?|1(?:\.0+)?)(?![\.\d])/).map(Number);static numberByte=this.reg(/0*(?:25[0-5]|2[0-4]\d|1?\d?\d)(?!\d|\.)/).map(Number);static whitespace=this.reg(/\s+/);static whitespaceOpt=this.reg(/\s*/);static whitespaceInline=this.reg(/[^\S\n]+/);static whitespaceInlineOpt=this.reg(/[^\S\n]+/);static whitespaceMultiline=this.reg(/\s*?\n\s*/);static doubleQuotedString=this.regArray(new RegExp(`"(${this.#w('"')})"`)).map(this.#g);static singleQuotedString=this.regArray(new RegExp(`'(${this.#w("'")})'`)).map(this.#g);static backtickQuotedString=this.regArray(new RegExp(`\`(${this.#w("`")})\``)).map(this.#g);constructor(t,e=!1){this.Self=this.constructor,this.#r=t}getParser(){return this.#r}run(e){const r=this.#r.parse(t.makeContext(this,e),0);return r.status&&r.position===e.length?r:t.makeFailure(r.position)}parse(t){const e=this.run(t);if(!e.status)throw new Error(`Could not parse "${t.length>20?t.substring(0,17)+"...":t}"`);return e.value}static str(t){return new this(new r(t))}static reg(t,e=0){return new this(new o(t,e))}static regArray(t){return new this(new o(t,-1))}static success(){return new this(s.instance)}static failure(){return new this(a.instance)}static seq(...t){return new this(new c(...t.map((t=>t.getParser()))))}static alt(...t){return new this(new n(...t.map((t=>t.getParser()))))}static lookahead(t){return new this(new u(t.getParser(),u.Type.POSITIVE_AHEAD))}static lazy(t){return new this(new p(t))}times(t,e=t){return new this.Self(new l(this.#r,t,e))}many(){return this.times(0,Number.POSITIVE_INFINITY)}atLeast(t){return this.times(t,Number.POSITIVE_INFINITY)}atMost(t){return this.times(0,t)}opt(){return this.Self.alt(this,this.Self.success())}sepBy(t,e=!1){return this.Self.seq(this,this.Self.seq(t,this).map(g.#g).many()).map(g.#m)}skipSpace(){return this.Self.seq(this,this.Self.whitespaceOpt).map(g.#l)}map(t){return new this.Self(new h(this.#r,t))}chain(t){return new this.Self(new i(this.#r,t))}assert(t){return this.chain(((e,r,s)=>t(e,r,s)?this.Self.success().map((()=>e)):this.Self.failure()))}join(t=""){return this.map(g.#d)}toString(r=0,s=!1){return(s?"\n"+e.indentation.repeat(r):"")+this.#r.toString(t.makeContext(this,""),r)}}export{g as default};
